---
- name: Load distribution-specific variables
  include_vars: "{{ item }}"
  with_first_found:
    - "{{ ansible_distribution|lower }}_{{ ansible_distribution_release }}.yml"
    - default.yml

- name: Install prerequisites
  apt:
    name:
      - apt-transport-https
      - ca-certificates
      - curl
      - python3-pip
      - software-properties-common
    state: present

- name: Install Python bindings
  pip:
    name: docker
    version: "{{ docker_python_module_version }}"
    executable: /usr/bin/pip3

- name: Add APT key
  apt_key:
    url: "https://download.docker.com/linux/{{ ansible_distribution|lower }}/gpg"

- name: Add APT repository
  apt_repository:
    repo: 'deb [arch=amd64] https://download.docker.com/linux/{{ ansible_distribution|lower }} {{ ansible_distribution_release }} {{ docker_distribution_build }}'
    update_cache: yes

- name: Install packages
  apt:
    name: docker-ce
    state: present

- name: Install docker-compose
  get_url:
    url: "https://github.com/docker/compose/releases/download/{{ docker_compose_version }}/docker-compose-Linux-x86_64"
    dest: /usr/local/bin/docker-compose
    mode: 0755

- name: Create the 'docker' group
  group:
    name: docker
    state: present

- name: Create a directory for systemd drop-ins
  file:
    path: /etc/systemd/system/docker.service.d
    state: directory
    mode: 0755

- name: Deploy systemd drop-in
  template:
    src: override.conf
    dest: /etc/systemd/system/docker.service.d/override.conf
    owner: root
    group: root
    mode: 0644
    force: yes
    backup: yes
  notify:
    - reload systemd units and restart docker

- name: Deploy daemon configuration
  template:
    src: daemon.json
    dest: /etc/docker/daemon.json
    owner: root
    group: root
    mode: 0644
    force: yes
    backup: yes
  notify:
    - reload systemd units and restart docker

- name: Ensure the Docker service is enabled and started
  systemd:
    name: docker
    enabled: yes
    state: started
